---
alwaysApply: true
---
# 🚨 **TICKET REQUIRED ENFORCEMENT RULE**

**Goal:** NO coding implementation can proceed without a valid Linear ticket number.

**🚨 STOP THE AI: If you see ANY coding implementation without a ticket, immediately call out the violation and demand a ticket number.**

## 🔒 **MANDATORY REQUIREMENT**
**EVERY coding task, feature request, bug fix, or code change MUST have a Linear ticket before implementation begins.**

**⚠️ CRITICAL: This rule MUST be enforced by the AI assistant. If you see ANY coding implementation without a ticket, the AI has violated this rule.**

## 📋 **Enforcement Process**

### **Step 1: Ticket Validation (REQUIRED)**
When ANY coding request is made:
1. **STOP** - Do not proceed with implementation
2. **CHECK** - Does the request include a Linear ticket number?
3. **VALIDATE** - Is the ticket number in correct format? (`SMA-\d+` or `ENG-\d+`)
4. **VERIFY** - Does the ticket exist in Linear?

### **Step 2: Ticket Requirements**
**Valid ticket formats:**
- `SMA-27` ✅
- `ENG-123` ✅
- `SMA-1` ✅
- `feature request` ❌
- `bug fix` ❌
- `add login` ❌

### **Step 3: Implementation Blocking**
**If NO ticket provided:**
```
🚨 IMPLEMENTATION BLOCKED - TICKET REQUIRED

Before I can implement this coding task, you MUST provide:
1. A Linear ticket number (e.g., SMA-27)
2. OR create a new ticket using @linear-ticket-creator-backend.mdc

Examples of valid tickets:
- SMA-27: Add user authentication
- ENG-123: Fix login bug
- SMA-15: Implement new API endpoint

Please provide a ticket number or create one first.
```

**If ticket provided but invalid:**
```
🚨 INVALID TICKET FORMAT

The ticket format must be:
- SMA-XX (where XX is a number)
- ENG-XX (where XX is a number)

Your ticket: [invalid format]
Please provide a valid ticket number.
```

## 🎯 **What Gets Blocked**
**ALL coding requests are blocked without tickets:**
- ❌ "Add a new API endpoint"
- ❌ "Fix the login bug"
- ❌ "Create a new page"
- ❌ "Refactor the database code"
- ❌ "Add unit tests"
- ❌ "Update the UI"

## ✅ **What Gets Allowed**
**Only requests WITH valid tickets:**
- ✅ "Implement SMA-27: Add user authentication API"
- ✅ "Fix ENG-123: Login validation bug"
- ✅ "Create SMA-15: User management page"

## 🔄 **Workflow Integration**

### **With @master-enforcement.mdc:**
This rule is **Phase 1** of the master enforcement system.
1. **Ticket required** (this rule) - Phase 1
2. **Branch created** (@branching-prs.mdc) - Phase 2
3. **Quality standards** (@go-microservices.mdc) - Phase 3
4. **Implementation** - Phase 4 (ONLY after all phases complete)

### **With @linear-ticket-creator-backend.mdc:**
If no ticket exists:
1. **Offer to create ticket** using the rule
2. **Wait for ticket creation**
3. **Then proceed to Phase 2** (branching)

## 📝 **Response Templates**

### **No Ticket Provided:**
```
🚨 TICKET REQUIRED BEFORE IMPLEMENTATION

I cannot proceed with this coding task without a Linear ticket number.

**Required:**
- Linear ticket number (SMA-XX or ENG-XX)

**Options:**
1. Provide existing ticket number
2. Create new ticket using @linear-ticket-creator-backend.mdc

**Example valid requests:**
- "Implement SMA-27: Add user authentication"
- "Fix ENG-123: Login validation issue"
- "Create SMA-15: User management page"

Please provide a ticket number or create one first.
```

### **Invalid Ticket Format:**
```
🚨 INVALID TICKET FORMAT

Ticket must be in format: SMA-XX or ENG-XX

**Your request:** [invalid format]
**Valid examples:**
- SMA-27
- ENG-123
- SMA-1

Please provide a valid ticket number.
```

## ⚠️ **Enforcement Rules**
- **NEVER** start coding without a ticket
- **NEVER** accept generic feature requests
- **NEVER** proceed with implementation until ticket validated
- **ALWAYS** validate ticket format
- **ALWAYS** verify ticket exists
- **ALWAYS** block implementation until ticket provided
- **ALWAYS** offer ticket creation if none exists
- **ALWAYS** respond with ticket requirement message first
- **ALWAYS** wait for user to provide ticket before any code changes

## 🎯 **Success Criteria**
Implementation can ONLY proceed when:
- [ ] Valid ticket number provided
- [ ] Ticket format is correct (SMA-XX or ENG-XX)
- [ ] Ticket exists in Linear (verified)
- [ ] User explicitly confirms ticket number
- [ ] AI has responded with ticket requirement message first
- [ ] No code changes have been made without ticket validation

## 🚨 **AI ASSISTANT ENFORCEMENT CHECKLIST**
Before ANY coding implementation, the AI MUST:
1. ✅ **FIRST** respond with ticket requirement message
2. ✅ **WAIT** for user to provide ticket number
3. ✅ **VALIDATE** ticket format and existence
4. ✅ **ONLY THEN** proceed with implementation
5. ✅ **NEVER** start coding in the same response as ticket request
