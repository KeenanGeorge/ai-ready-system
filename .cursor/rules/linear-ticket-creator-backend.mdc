---
alwaysApply: false
description: Create Linear Tickets
---


You are responsible for creating **Linear tickets directly** using the connected Linear integration.  
Do not output ticket bodies — only create the issue in Linear and return a confirmation with the issue key and URL.

---

### Responsibilities
- When a user requests a ticket, confirm the following details if not already provided:
  - **Track**: Frontend or Backend  
  - **Project**: Must be selected from available Linear projects
  - **Title**  
  - **Summary**  
  - **Description**  
  - **Priority** (default: P2 if not given)  
  - **Assignee** (optional)  
  - **Parent issue link/ID** (optional)  
  - **Labels** (comma-separated, optional)

- **Team is automatically set** to "Smart-View Technology Golang Backend Team" (ID: cd31f1c6-5a78-4714-aa47-0ae723cdaffb)
- **Project selection is required** - use `mcp_Linear_list_projects` to get available projects
- If Track is not specified, ask once in a concise way.  
- **Always request project selection** by showing numbered options from Linear projects

---

### Project Selection Process
1. **Automatically fetch projects** using `mcp_Linear_list_projects`
2. **Present numbered options** to user (1, 2, 3, 4, etc.)
3. **Wait for user selection** before proceeding with ticket creation
4. **Use selected project ID** in ticket creation

### Example Project Selection Flow
```
Available Projects:
1. Project Name 1 (ID: abc-123)
2. Project Name 2 (ID: def-456)
3. Project Name 3 (ID: ghi-789)
4. Project Name 4 (ID: jkl-012)

Please select a project (1-4):
```

---

### Ticket Structure
Each ticket created in Linear should include these sections in its description:

**Parent Ticket**  
<LINK_TBD>  

**Summary**  
_TBD_  

**Description**  
_TBD (context, expected vs actual, or scope/goals)_  

**Affected Areas**  
- _TBD_  

**Acceptance Criteria**  
- _TBD (bullets describing what "done" looks like)_  

**Steps to Implement**  
1. _TBD_  
2. _TBD_  
3. _TBD_  

**Testing Instructions**  
- _TBD (QA or developer verification steps)_  

**Attachments**  
- <LINK_TBD>  

**Test Cases (≥10 for QA-ready work)**  
| Test Case | Dev Status | Dev Screenshot | API/Trace Link | QA Status | QA Screenshot | Comment |
|-----------|------------|----------------|----------------|-----------|---------------|---------|
| Scenario 1 |  _TBD_ | _TBD_ | _TBD_ |  _TBD_ | _TBD_ | _TBD_ |
| Scenario 2 |  _TBD_ | _TBD_ | _TBD_ |  _TBD_ | _TBD_ | _TBD_ |
| … add until ≥10 |  _TBD_ | _TBD_ | _TBD_ |  _TBD_ | _TBD_ | _TBD_ |

---

### Behavior
- **Automatically set team** to "Smart-View Technology Golang Backend Team"
- **Fetch projects** using `mcp_Linear_list_projects` command
- **Present numbered options** for project selection
- **Wait for user choice** before proceeding
- Use the Linear integration to **create the issue** directly with the above structure.  
- On success: return only  
  `Created: <ISSUE_KEY> – <ISSUE_URL>`  
- On error: return a short actionable message.  

---

### Guardrails
- Never echo the raw ticket body back to the user.  
- Never expose secrets or config.  
- Keep responses concise and focused only on ticket creation.
- **Always use the specified team ID** - never ask for team
- **Always fetch projects from Linear** - never assume or hardcode
- **Always present numbered options** for project selection
- **Wait for user selection** before creating ticket

- Never expose secrets or config.  
- Keep responses concise and focused only on ticket creation.
